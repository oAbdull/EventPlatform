plugins {
    id 'base'
    id 'java'
    id 'org.springframework.boot' version '3.4.3' apply false
    id 'io.spring.dependency-management' version '1.1.7'
    id 'org.sonarqube' version '6.0.1.5171'

}

allprojects {
    group = 'org.example'
    version = '0.0.1-SNAPSHOT'

    repositories {
        mavenCentral()
    }
}

ext {
    springCloudVersion = '2024.0.0'
}

dependencyManagement {
    imports {
        mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
    }
}

// Define SonarQube host URL for SonarCloud
def sonarHostUrl = project.hasProperty('sonarHostUrl') ? project.sonarHostUrl : 'https://sonarcloud.io'

subprojects {
    apply plugin: 'java'
    apply plugin: 'org.springframework.boot'
    apply plugin: 'io.spring.dependency-management'
    apply plugin: 'org.sonarqube'
    apply plugin: 'jacoco'

    java {
        toolchain {
            languageVersion = JavaLanguageVersion.of(17)
        }
    }

    configurations {
        compileOnly {
            extendsFrom annotationProcessor
        }
    }

    dependencies {
        implementation 'org.springframework.boot:spring-boot-starter-amqp'
        developmentOnly 'org.springframework.boot:spring-boot-devtools'
        testImplementation 'org.springframework.boot:spring-boot-starter-test'
        annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'
        implementation 'org.projectlombok:lombok'
        annotationProcessor 'org.projectlombok:lombok'
        compileOnly 'org.projectlombok:lombok'
        testImplementation 'org.springframework.amqp:spring-rabbit-test'
        testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
    }

    sonar {
        properties {
            property 'sonar.projectKey', "eventplatform_eventplatform_${project.name}"
            property 'sonar.organization', 'eventplatform'
            property 'sonar.host.url', sonarHostUrl
            property 'sonar.sources', 'src/main/java'  // Adjust if your source files are elsewhere
            property 'sonar.tests', 'src/test/java'    // Adjust if your test files are elsewhere
            property 'sonar.inclusions', '**/*.java'   // Only include Java files
            property 'sonar.java.binaries', 'build/classes/java/main'
            property 'sonar.junit.reportPaths', 'build/test-results/test'
            property 'sonar.qualitygate.wait', false
            property 'sonar.token', System.getenv('SONAR_TOKEN') ?: ''
            property 'sonar.scm.provider', 'git'
            property 'sonar.coverage.jacoco.xmlReportPaths', 'build/reports/jacoco/test/jacocoTestReport.xml'
        }
    }

    tasks.named('test') {
        useJUnitPlatform()
        finalizedBy jacocoTestReport  // Ensure JaCoCo report is generated after tests
    }

    jacocoTestReport {
        reports {
            xml.required = true  // SonarCloud requires XML format
            xml.outputLocation = file("${buildDir}/reports/jacoco/test/jacocoTestReport.xml")
        }
    }
}

// Root-level SonarQube configuration
sonar {
    properties {
        property 'sonar.projectKey', 'eventplatform_eventplatform'
        property 'sonar.projectName', 'EventPlatform'
        property 'sonar.organization', 'eventplatform'
        property 'sonar.host.url', sonarHostUrl
        property 'sonar.sources', ''  // Root project typically has no sources
        property 'sonar.tests', ''    // Root project typically has no tests
        property 'sonar.java.binaries', ''
        property 'sonar.junit.reportPaths', ''
        property 'sonar.qualitygate.wait', false
        property 'sonar.token', System.getenv('SONAR_TOKEN') ?: ''
        property 'sonar.scm.provider', 'git'
        property 'sonar.coverage.jacoco.xmlReportPaths', ''
    }
}