services:
  eureka-server:
    build:
      context: ./DiscoveryService
      dockerfile: Dockerfile
    container_name: discoveryserver
    ports:
      - "8761:8761"
    networks:
      - microservices-network
  userservice:
    build:
      context: ./UserService
      dockerfile: Dockerfile
    container_name: "userservice"
    ports:
      - "8091:8081"
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres:5432/usersdb
      SPRING_DATASOURCE_USERNAME: postgres
      SPRING_DATASOURCE_PASSWORD: postgres
      eureka.client.serviceUrl.defaultZone: http://host.docker.internal:8761/eureka
      SPRING_DOCKER_COMPOSE_ENABLED: "false"
      SPRING_RABBITMQ_HOST: rabbitmq
    networks:
      - microservices-network
    depends_on:
      - postgres
      - rabbitmq

  eventservice:
    build:
      context: ./EventService
      dockerfile: Dockerfile
    container_name: "eventservice"
    ports:
      - "8092:8082"
    environment:
      SPRING_DATA_MONGODB_URI: mongodb://admin:password@mongodb:27017/eventDB?authSource=admin
      eureka.client.serviceUrl.defaultZone: http://host.docker.internal:8761/eureka
      SPRING_DOCKER_COMPOSE_ENABLED: "false"
      SPRING_RABBITMQ_HOST: rabbitmq
    networks:
      - microservices-network
    depends_on:
      - mongodb
      - rabbitmq

  ticketservice:
    build:
      context: ./TicketService
      dockerfile: Dockerfile
    container_name: "ticketservice"
    ports:
      - "8093:8083"
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres:5432/ticketsdb
      SPRING_DATASOURCE_USERNAME: postgres
      SPRING_DATASOURCE_PASSWORD: postgres
      eureka.client.serviceUrl.defaultZone: http://host.docker.internal:8761/eureka
      SPRING_DOCKER_COMPOSE_ENABLED: "false"
      SPRING_RABBITMQ_HOST: rabbitmq
    networks:
      - microservices-network
    depends_on:
      - postgres
      - rabbitmq

  apigateway:
    build:
      context: ./Apigateway
      dockerfile: Dockerfile
    container_name: "apigateway"
    ports:
      - "8090:8080"
    environment:
      SPRING_DOCKER_COMPOSE_ENABLED: "false"
      eureka.client.serviceUrl.defaultZone: http://host.docker.internal:8761/eureka
    networks:
      - microservices-network

  postgres:
    image: postgres:15.3-alpine3.18
    restart: always
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
    ports:
      - '5432:5432'
    volumes:
      - ./db:/var/lib/postgresql/data
      - ./create-db.sql:/docker-entrypoint-initdb.d/create_database.sql
    networks:
      - microservices-network

  mongodb:
    image: "mongo:7.0"
    container_name: "mongodb"
    ports:
      - "27017:27017"
    volumes:
      - mongodb_data:/data/db
    environment:
      MONGO_INITDB_ROOT_USERNAME: admin
      MONGO_INITDB_ROOT_PASSWORD: password
    deploy:
      resources:
        limits:
          memory: 2g
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 15s
      timeout: 10s
      retries: 10
      start_period: 30s
    networks:
      - microservices-network

  rabbitmq:
    image: rabbitmq:management
    container_name: rabbitmq
    restart: always
    ports:
      - 5672:5672
      - 15672:15672
    environment:
      RABBITMQ_DEFAULT_USER: guest
      RABBITMQ_DEFAULT_PASS: guest
    healthcheck:
      test: ["CMD", "nc", "-z", "rabbitmq", "5672"]
      interval: 1m30s
      timeout: 30s
      retries: 5
      start_period: 30s
    networks:
      - microservices-network

networks:
  microservices-network:
    driver: bridge

volumes:
  rabbitmq-lib:
    driver: local
  rabbitmq-log:
    driver: local
  rabbitmq_data:
  db-data:
  mongodb_data: