# Basic application settings
spring.application.name=Apigateway
server.port=8080
spring.main.web-application-type=reactive

# Spring Cloud Config (choose ONE option)
spring.config.import=optional:configserver:
# spring.cloud.config.enabled=false  # Uncomment this and comment the line above if you want to disable config server completely

# Eureka Configuration
eureka.client.registerWithEureka=true
eureka.client.fetch-registry=false
eureka.client.service-url.defaultZone=http://localhost:8761/eureka

# Gateway Routes
spring.cloud.gateway.routes[0].id=UserService
spring.cloud.gateway.routes[0].uri=lb://userservice
spring.cloud.gateway.routes[0].predicates[0]=Path=/api/users/**

spring.cloud.gateway.routes[1].id=EventService
spring.cloud.gateway.routes[1].uri=lb://eventservice
spring.cloud.gateway.routes[1].predicates[0]=Path=/api/event/**

spring.cloud.gateway.routes[2].id=TicketService
spring.cloud.gateway.routes[2].uri=lb://ticketservice
spring.cloud.gateway.routes[2].predicates[0]=Path=/api/tickets/**

spring.cloud.gateway.routes[3].id=notificationservice
spring.cloud.gateway.routes[3].uri=lb://notificationservice
spring.cloud.gateway.routes[3].predicates[0]=Path=/api/notification/**

# Uncomment these if you need them
# CORS Configuration
#spring.cloud.gateway.globalcors.corsConfigurations.[/**].allowedOrigins=http://localhost:*
#spring.cloud.gateway.globalcors.corsConfigurations.[/**].allowedMethods=GET,POST,PUT,DELETE,OPTIONS
#spring.cloud.gateway.globalcors.corsConfigurations.[/**].allowedHeaders=*
#spring.cloud.gateway.globalcors.corsConfigurations.[/**].allowCredentials=true

#spring.docker.compose.enabled=false
#spring.cloud.compatibility-verifier.enabled=false
#logging.level.org.springframework.security=DEBUG
#
## Auth0 Configuration
###spring.security.oauth2.client.registration.auth0.client-id=3d2mIOsBRnbOdu8eaNk405lgaNzC1RWP
##spring.security.oauth2.client.registration.auth0.client-secret=EG7UPxR07XjSw82-rn4Tg-y2f5-5ubsS37aK7ZX7EFyx094db56PAUb8QHfuvkGJ
##spring.security.oauth2.client.registration.auth0.scope=openid,profile,email
##spring.security.oauth2.client.registration.auth0.authorization-grant-type=authorization_code
##spring.security.oauth2.client.registration.auth0.redirect-uri=http://localhost:8080/login/oauth2/code/auth0
##spring.security.oauth2.client.provider.auth0.issuer-uri=https://apieventplatform.eu.auth0.com/
#
## Login Route
#spring.cloud.gateway.routes[2].id=login-route
#spring.cloud.gateway.routes[2].uri=http://localhost:8080
#spring.cloud.gateway.routes[2].predicates[0]=Path=/login/**
#spring.cloud.gateway.routes[2].filters[0]=RewritePath=/login/?(?<segment>.*),/oauth2/authorization/auth0
#
## User Service Route
#spring.cloud.gateway.routes[0].id=user-service
#spring.cloud.gateway.routes[0].uri=http://${USER_SERVICE_HOST:userservice}:${USER_SERVICE_PORT:8081}
#spring.cloud.gateway.routes[0].predicates[0]=Path=/api/users/**
#
## Event Service Route
#spring.cloud.gateway.routes[1].id=event-service
#spring.cloud.gateway.routes[1].uri=http://${EVENT_SERVICE_HOST:eventservice}:${EVENT_SERVICE_PORT:8082}
#spring.cloud.gateway.routes[1].predicates[0]=Path=/api/events/**
#
#spring.cloud.gateway.routes[3].id=ticket-service
#spring.cloud.gateway.routes[3].uri=http://${TICKET_SERVICE_HOST:ticketservice}:${TICKET_SERVICE_PORT:8083}
#spring.cloud.gateway.routes[3].predicates[0]=Path=/api/tickets/**
#
#
## CORS Configuration
#spring.cloud.gateway.globalcors.corsConfigurations.[/**].allowedOrigins=http://localhost:*
#spring.cloud.gateway.globalcors.corsConfigurations.[/**].allowedMethods=GET,POST,PUT,DELETE,OPTIONS
#spring.cloud.gateway.globalcors.corsConfigurations.[/**].allowedHeaders=*
#spring.cloud.gateway.globalcors.corsConfigurations.[/**].allowCredentials=true
#
#spring.docker.compose.enabled=false
#spring.cloud.compatibility-verifier.enabled=false
#
#logging.level.org.springframework.security=DEBUG