stages:
  - build
  - e2e_test
  - code_quality
  - deploy

services:
  - name: docker:dind
    alias: docker

cache:
  key: ${CI_COMMIT_REF_SLUG}
  paths:
    - .gradle/

# Build Jobs

build-api-gateway:
  stage: build
  image: gradle:8.4.0-jdk17
  tags:
    - docker
  before_script:
    - chmod +x ./gradlew
  script:
    - ./gradlew :Apigateway:clean :Apigateway:build -x test
    - |
      JAR_FILE=$(find Apigateway/build/libs -name "*.jar" -type f | head -n 1)
      if [ -n "$JAR_FILE" ]; then
        cp "$JAR_FILE" api-gateway.jar
      else
        echo "No JAR file found"
        exit 1
      fi
  artifacts:
    paths:
      - api-gateway.jar

build-event-service:
  stage: build
  image: gradle:8.4.0-jdk17
  tags:
    - docker
  before_script:
    - chmod +x ./gradlew
  script:
    - ./gradlew :EventService:clean :EventService:build -x test
    - |
      JAR_FILE=$(find EventService/build/libs -name "*.jar" -type f | head -n 1)
      if [ -n "$JAR_FILE" ]; then
        cp "$JAR_FILE" event-service.jar
      else
        echo "No JAR file found"
        exit 1
      fi
  artifacts:
    paths:
      - event-service.jar

build-ticket-service:
  stage: build
  image: gradle:8.4.0-jdk17
  tags:
    - docker
  before_script:
    - chmod +x ./gradlew
  script:
    - ./gradlew :TicketService:clean :TicketService:build -x test
    - |
      JAR_FILE=$(find TicketService/build/libs -name "*.jar" -type f | head -n 1)
      if [ -n "$JAR_FILE" ]; then
        cp "$JAR_FILE" ticket-service.jar
      else
        echo "No JAR file found"
        exit 1
      fi
  artifacts:
    paths:
      - ticket-service.jar

build-eureka-server:
  stage: build
  image: gradle:8.4.0-jdk17
  tags:
    - docker
  before_script:
    - chmod +x ./gradlew
  script:
    - ./gradlew :DiscoveryService:clean :DiscoveryService:build -x test
    - |
      JAR_FILE=$(find DiscoveryService/build/libs -name "*.jar" -type f | head -n 1)
      if [ -n "$JAR_FILE" ]; then
        cp "$JAR_FILE" eureka-server.jar
      else
        echo "No JAR file found"
        exit 1
      fi
  artifacts:
    paths:
      - eureka-server.jar

# # E2E Test Job
# e2e-test-api-gateway:
#   stage: e2e_test
#   image: gradle:8.4.0-jdk17
#   tags:
#     - docker

#   before_script:
#     - chmod +x ./gradlew
#     - export DOCKER_HOST=tcp://docker:2375
#     - docker-compose -f docker-compose.yml up -d
#     - sleep 60
#     - echo "Checking container logs..."
#     - docker logs api-gateway || true
#     - docker logs event-service || true
#     - docker logs ticket-service || true
#     - docker logs discovery-server || true
#   script:
#     - cd api-gateway
#     - ./gradlew test --tests "com.apigateway.ApigatewayApplicationTests"
#   after_script:
#     - docker-compose -f ../docker-compose.yml down
#   needs:
#     - build-api-gateway
#     - build-event-service
#     - build-ticket-service
#     - build-eureka-server
#   variables:
#     SPRING_PROFILES_ACTIVE: test
#   artifacts:
#     paths:
#       - api-gateway/build/test-results/test
#     expire_in: 1 week


# # SonarQube Analysis
# sonarqube-check:
#   stage: code_quality
#   image: gradle:8.4.0-jdk17
#   tags:
#     - docker
#   before_script:
#     - chmod +x ./gradlew
#   script:
#     - ./gradlew :api-gateway:build :event-service:build :ticket-service:build :discovery-service:build -x test
#     - export SONAR_TOKEN="$SONAR_TOKEN"
#     - ./gradlew sonar "-Dsonar.login=$SONAR_TOKEN"
#   variables:
#     SONAR_HOST_URL: "https://sonarcloud.io"
#     SONAR_LOGIN: "$SONAR_TOKEN"
#   needs:
#     - e2e-test-api-gateway
#   only:
#     - main
#     - dev
#     - master
#   allow_failure: true
# Deploy Jobs

deploy-api-gateway:
  stage: deploy
  image: docker:20.10
  services:
    - docker:dind
  tags:
    - docker
  before_script:
    - export DOCKER_CONFIG="$CI_PROJECT_DIR/.docker"
    - mkdir -p "$DOCKER_CONFIG"
    - echo "{\"auths\":{\"https://index.docker.io/v1/\":{\"username\":\"$DOCKER_USER\",\"password\":\"$DOCKER_PASSWORD\"}}}" > "$DOCKER_CONFIG/config.json"

  script:
    - docker build --build-arg JAR_FILE=apigateway.jar -t ${DOCKER_IMAGE_PREFIX}/apigateway:${CI_COMMIT_REF_SLUG} ./api-gateway
    - docker push ${DOCKER_IMAGE_PREFIX}/apigateway:${CI_COMMIT_REF_SLUG}
    - docker tag ${DOCKER_IMAGE_PREFIX}/apigateway:${CI_COMMIT_REF_SLUG} ${DOCKER_IMAGE_PREFIX}/apigateway:latest
    - docker push ${DOCKER_IMAGE_PREFIX}/apigateway:latest
  environment: production

deploy-event-service:
  stage: deploy
  image: docker:20.10
  services:
    - docker:dind
  tags:
    - docker
  before_script:
    - export DOCKER_CONFIG="$CI_PROJECT_DIR/.docker"
    - mkdir -p "$DOCKER_CONFIG"
    - echo "{\"auths\":{\"https://index.docker.io/v1/\":{\"username\":\"$DOCKER_USER\",\"password\":\"$DOCKER_PASSWORD\"}}}" > "$DOCKER_CONFIG/config.json"

  script:
    - docker build --build-arg JAR_FILE=event-service.jar -t ${DOCKER_IMAGE_PREFIX}/eventservice:${CI_COMMIT_REF_SLUG} ./event-service
    - docker push ${DOCKER_IMAGE_PREFIX}/eventservice:${CI_COMMIT_REF_SLUG}
    - docker tag ${DOCKER_IMAGE_PREFIX}/eventservice:${CI_COMMIT_REF_SLUG} ${DOCKER_IMAGE_PREFIX}/eventservice:latest
    - docker push ${DOCKER_IMAGE_PREFIX}/eventservice:latest
  environment: production

deploy-ticket-service:
  stage: deploy
  image: docker:20.10
  services:
    - docker:dind
  tags:
    - docker
  before_script:
    - export DOCKER_CONFIG="$CI_PROJECT_DIR/.docker"
    - mkdir -p "$DOCKER_CONFIG"
    - echo "{\"auths\":{\"https://index.docker.io/v1/\":{\"username\":\"$DOCKER_USER\",\"password\":\"$DOCKER_PASSWORD\"}}}" > "$DOCKER_CONFIG/config.json"

  script:
    - docker build --build-arg JAR_FILE=ticketservice.jar -t ${DOCKER_IMAGE_PREFIX}/ticketservice:${CI_COMMIT_REF_SLUG} ./ticket-service
    - docker push ${DOCKER_IMAGE_PREFIX}/ticketservice:${CI_COMMIT_REF_SLUG}
    - docker tag ${DOCKER_IMAGE_PREFIX}/ticketservice:${CI_COMMIT_REF_SLUG} ${DOCKER_IMAGE_PREFIX}/ticketservice:latest
    - docker push ${DOCKER_IMAGE_PREFIX}/ticketservice:latest
  environment: production

deploy-discovery-service:
  stage: deploy
  image: docker:20.10
  services:
    - docker:dind
  tags:
    - docker
  before_script:
    - export DOCKER_CONFIG="$CI_PROJECT_DIR/.docker"
    - mkdir -p "$DOCKER_CONFIG"
    - echo "{\"auths\":{\"https://index.docker.io/v1/\":{\"username\":\"$DOCKER_USER\",\"password\":\"$DOCKER_PASSWORD\"}}}" > "$DOCKER_CONFIG/config.json"

  script:
    - docker build --build-arg JAR_FILE=discoveryservice.jar -t ${DOCKER_IMAGE_PREFIX}/discoveryservice:${CI_COMMIT_REF_SLUG} ./discovery-service
    - docker push ${DOCKER_IMAGE_PREFIX}/discoveryservice:${CI_COMMIT_REF_SLUG}
    - docker tag ${DOCKER_IMAGE_PREFIX}/discoveryservice:${CI_COMMIT_REF_SLUG} ${DOCKER_IMAGE_PREFIX}/discoveryservice:latest
    - docker push ${DOCKER_IMAGE_PREFIX}/discoveryservice:latest
  environment: production
  # needs:
  #   - sonarqube-check