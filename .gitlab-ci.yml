stages:
  - build
  - test
  - code_quality
  - deploy

# Add cache configuration for all jobs
cache:
  key: ${CI_COMMIT_REF_SLUG}
  paths:
    - .gradle/

# Build Jobs (No changes)
build-apigateway:
  stage: build
  image: gradle:jdk17
  tags:
    - docker
  before_script:
    - chmod +x ./gradlew
  script:
    - ./gradlew :Apigateway:clean :Apigateway:build -x test
    - |
      JAR_FILE=$(find Apigateway/build/libs -name "*.jar" -type f | head -n 1)
      if [ -n "$JAR_FILE" ]; then
        cp "$JAR_FILE" apigateway.jar
      else
        echo "No JAR file found in Apigateway/build/libs directory"
        find Apigateway/build -name "*.jar" -type f
        exit 1
      fi
  artifacts:
    paths:
      - apigateway.jar

build-eventservice:
  stage: build
  image: gradle:jdk17
  tags:
    - docker
  before_script:
    - chmod +x ./gradlew
  script:
    - ./gradlew :EventService:clean :EventService:build -x test
    - |
      JAR_FILE=$(find EventService/build/libs -name "*.jar" -type f | head -n 1)
      if [ -n "$JAR_FILE" ]; then
        cp "$JAR_FILE" eventservice.jar
      else
        echo "No JAR file found in EventService/build/libs directory"
        find EventService/build -name "*.jar" -type f
        exit 1
      fi
  artifacts:
    paths:
      - eventservice.jar

build-userservice:
  stage: build
  image: gradle:jdk17
  tags:
    - docker
  before_script:
    - chmod +x ./gradlew
  script:
    - ./gradlew :UserService:clean :UserService:build -x test
    - |
      JAR_FILE=$(find UserService/build/libs -name "*.jar" -type f | head -n 1)
      if [ -n "$JAR_FILE" ]; then
        cp "$JAR_FILE" userservice.jar
      else
        echo "No JAR file found in UserService/build/libs directory"
        find UserService/build -name "*.jar" -type f
        exit 1
      fi
  artifacts:
    paths:
      - userservice.jar

build-ticketservice:
  stage: build
  image: gradle:jdk17
  tags:
    - docker
  before_script:
    - chmod +x ./gradlew
  script:
    - ./gradlew :TicketService:clean :TicketService:build -x test
    - |
      JAR_FILE=$(find TicketService/build/libs -name "*.jar" -type f | head -n 1)
      if [ -n "$JAR_FILE" ]; then
        cp "$JAR_FILE" ticketservice.jar
      else
        echo "No JAR file found in TicketService/build/libs directory"
        find TicketService/build -name "*.jar" -type f
        exit 1
      fi
  artifacts:
    paths:
      - ticketservice.jar

# Test Jobs (No changes)
test-apigateway:
  stage: test
  image: gradle:jdk17
  tags:
    - docker
  script:
    - chmod +x ./gradlew
    - ./gradlew :Apigateway:test :Apigateway:jacocoTestReport
  needs:
    - build-apigateway
  artifacts:
    paths:
      - Apigateway/build/test-results/test
      - Apigateway/build/reports/jacoco/test/jacocoTestReport.xml

test-eventservice:
  stage: test
  image: gradle:jdk17
  tags:
    - docker
  script:
    - chmod +x ./gradlew
    - ./gradlew :EventService:test :EventService:jacocoTestReport
  needs:
    - build-eventservice
  artifacts:
    paths:
      - EventService/build/test-results/test
      - EventService/build/reports/jacoco/test/jacocoTestReport.xml

test-userservice:
  stage: test
  image: gradle:jdk17
  tags:
    - docker
  script:
    - chmod +x ./gradlew
    - ./gradlew :UserService:test :UserService:jacocoTestReport
  needs:
    - build-userservice
  artifacts:
    paths:
      - UserService/build/test-results/test
      - UserService/build/reports/jacoco/test/jacocoTestReport.xml

test-ticketservice:
  stage: test
  image: gradle:jdk17
  tags:
    - docker
  script:
    - chmod +x ./gradlew
    - ./gradlew :TicketService:test :TicketService:jacocoTestReport
  needs:
    - build-ticketservice
  artifacts:
    paths:
      - TicketService/build/test-results/test
      - TicketService/build/reports/jacoco/test/jacocoTestReport.xml

# SonarQube Analysis (No changes)
sonarqube-check:
  stage: code_quality
  image: gradle:jdk17
  tags:
    - docker
    - gradle
  before_script:
    - chmod +x ./gradlew
  script:
    - echo "Running SonarQube Analysis for all services"
    - ./gradlew :Apigateway:build :EventService:build :UserService:build :TicketService:build -x test
    - ./gradlew :Apigateway:test :EventService:test :UserService:test :TicketService:test
    - export SONAR_TOKEN="$SONAR_TOKEN"
    - ./gradlew sonar "-Dsonar.login=$SONAR_TOKEN"
  variables:
    SONAR_HOST_URL: "https://sonarcloud.io"
    SONAR_LOGIN: "$SONAR_TOKEN"
  needs:
    - test-apigateway
    - test-eventservice
    - test-userservice
    - test-ticketservice
  only:
    - main
    - dev
    - master
  allow_failure: true

# Deploy Jobs (Updated to match variable names)
deploy-apigateway:
  stage: deploy
  image: docker:latest
  services:
    - docker:dind
  tags:
    - docker
  before_script:
    - echo "$DOCKER_PASSWORD" | docker login -u "$DOCKER_USER" --password-stdin
  script:
    - docker build --build-arg JAR_FILE=apigateway.jar -t ${DOCKER_IMAGE_PREFIX}/apigateway:${CI_COMMIT_REF_SLUG} ./Apigateway
    - docker push ${DOCKER_IMAGE_PREFIX}/apigateway:${CI_COMMIT_REF_SLUG}
    - docker tag ${DOCKER_IMAGE_PREFIX}/apigateway:${CI_COMMIT_REF_SLUG} ${DOCKER_IMAGE_PREFIX}/apigateway:latest
    - docker push ${DOCKER_IMAGE_PREFIX}/apigateway:latest
  environment: production
  needs:
    - sonarqube-check
  when: manual

deploy-eventservice:
  stage: deploy
  image: docker:latest
  services:
    - docker:dind
  tags:
    - docker
  before_script:
    - echo "$DOCKER_PASSWORD" | docker login -u "$DOCKER_USER" --password-stdin
  script:
    - docker build --build-arg JAR_FILE=eventservice.jar -t ${DOCKER_IMAGE_PREFIX}/eventservice:${CI_COMMIT_REF_SLUG} ./EventService
    - docker push ${DOCKER_IMAGE_PREFIX}/eventservice:${CI_COMMIT_REF_SLUG}
    - docker tag ${DOCKER_IMAGE_PREFIX}/eventservice:${CI_COMMIT_REF_SLUG} ${DOCKER_IMAGE_PREFIX}/eventservice:latest
    - docker push ${DOCKER_IMAGE_PREFIX}/eventservice:latest
  environment: production
  needs:
    - sonarqube-check
  when: manual

deploy-userservice:
  stage: deploy
  image: docker:latest
  services:
    - docker:dind
  tags:
    - docker
  before_script:
    - echo "$DOCKER_PASSWORD" | docker login -u "$DOCKER_USER" --password-stdin
  script:
    - docker build --build-arg JAR_FILE=userservice.jar -t ${DOCKER_IMAGE_PREFIX}/userservice:${CI_COMMIT_REF_SLUG} ./UserService
    - docker push ${DOCKER_IMAGE_PREFIX}/userservice:${CI_COMMIT_REF_SLUG}
    - docker tag ${DOCKER_IMAGE_PREFIX}/userservice:${CI_COMMIT_REF_SLUG} ${DOCKER_IMAGE_PREFIX}/userservice:latest
    - docker push ${DOCKER_IMAGE_PREFIX}/userservice:latest
  environment: production
  needs:
    - sonarqube-check
  when: manual

deploy-ticketservice:
  stage: deploy
  image: docker:latest
  services:
    - docker:dind
  tags:
    - docker
  before_script:
    - echo "$DOCKER_PASSWORD" | docker login -u "$DOCKER_USER" --password-stdin
  script:
    - docker build --build-arg JAR_FILE=ticketservice.jar -t ${DOCKER_IMAGE_PREFIX}/ticketservice:${CI_COMMIT_REF_SLUG} ./TicketService
    - docker push ${DOCKER_IMAGE_PREFIX}/ticketservice:${CI_COMMIT_REF_SLUG}
    - docker tag ${DOCKER_IMAGE_PREFIX}/ticketservice:${CI_COMMIT_REF_SLUG} ${DOCKER_IMAGE_PREFIX}/ticketservice:latest
    - docker push ${DOCKER_IMAGE_PREFIX}/ticketservice:latest
  environment: production
  needs:
    - sonarqube-check
  when: manual