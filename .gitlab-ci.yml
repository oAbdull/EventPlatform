stages:
  - build
  - e2e_test
  - code_quality
  - deploy

services:
  - name: docker:dind
    alias: docker

cache:
  key: ${CI_COMMIT_REF_SLUG}
  paths:
    - .gradle/

# Build Jobs
build-apigateway:
  stage: build
  image: gradle:8.4.0-jdk17
  tags:
    - docker
  before_script:
    - chmod +x ./gradlew
  script:
    - ./gradlew :Apigateway:clean :Apigateway:build -x test
    - |
      JAR_FILE=$(find Apigateway/build/libs -name "*.jar" -type f | head -n 1)
      if [ -n "$JAR_FILE" ]; then
        cp "$JAR_FILE" apigateway.jar
      else
        echo "No JAR file found"
        exit 1
      fi
  artifacts:
    paths:
      - apigateway.jar

build-userservice:
  stage: build
  image: gradle:8.4.0-jdk17
  tags:
    - docker
  before_script:
    - chmod +x ./gradlew
  script:
    - ./gradlew :UserService:clean :UserService:build -x test
    - |
      JAR_FILE=$(find UserService/build/libs -name "*.jar" -type f | head -n 1)
      if [ -n "$JAR_FILE" ]; then
        cp "$JAR_FILE" userservice.jar
      else
        echo "No JAR file found"
        exit 1
      fi
  artifacts:
    paths:
      - userservice.jar

build-ticketservice:
  stage: build
  image: gradle:8.4.0-jdk17
  tags:
    - docker
  before_script:
    - chmod +x ./gradlew
  script:
    - ./gradlew :TicketService:clean :TicketService:build -x test
    - |
      JAR_FILE=$(find TicketService/build/libs -name "*.jar" -type f | head -n 1)
      if [ -n "$JAR_FILE" ]; then
        cp "$JAR_FILE" ticketservice.jar
      else
        echo "No JAR file found"
        exit 1
      fi
  artifacts:
    paths:
      - ticketservice.jar

build-discoveryservice:
  stage: build
  image: gradle:8.4.0-jdk17
  tags:
    - docker
  before_script:
    - chmod +x ./gradlew
  script:
    - ./gradlew :DiscoveryService:clean :DiscoveryService:build -x test
    - |
      JAR_FILE=$(find DiscoveryService/build/libs -name "*.jar" -type f | head -n 1)
      if [ -n "$JAR_FILE" ]; then
        cp "$JAR_FILE" discoveryservice.jar
      else
        echo "No JAR file found"
        exit 1
      fi
  artifacts:
    paths:
      - discoveryservice.jar

# E2E Test Job
e2e-test:
  stage: e2e_test
  image: gradle-docker-compose:8.4.0-jdk17  # استخدام الصورة المخصصة
  tags:
    - docker
  services:
    - name: docker:dind
      alias: docker
  before_script:
    - chmod +x ./gradlew
    - export DOCKER_HOST=tcp://docker:2375
    - RANDOM_SUFFIX=$(uuidgen | cut -c1-8)
    - export RANDOM_SUFFIX
    - docker-compose -f docker-compose.yml up -d
    - sleep 300
    - echo "Checking container logs..."
    - docker logs apigateway_${RANDOM_SUFFIX} || true
    - docker logs userservice_${RANDOM_SUFFIX} || true
    - docker logs ticketservice_${RANDOM_SUFFIX} || true
    - docker logs discoveryserver_${RANDOM_SUFFIX} || true
    - docker logs postgres_${RANDOM_SUFFIX} || true
    - docker logs rabbitmq_${RANDOM_SUFFIX} || true
  script:
    - ./gradlew :UserService:e2eTest
    - ./gradlew :TicketService:e2eTest
  after_script:
    - docker-compose -f docker-compose.yml down
  needs:
    - build-userservice
    - build-ticketservice
    - build-apigateway
    - build-discoveryservice
  variables:
    SPRING_PROFILES_ACTIVE: test
  artifacts:
    paths:
      - UserService/build/test-results/e2eTest
      - TicketService/build/test-results/e2eTest
    expire_in: 1 week

# SonarQube Analysis
sonarqube-check:
  stage: code_quality
  image: gradle:8.4.0-jdk17
  tags:
    - docker
  before_script:
    - chmod +x ./gradlew
  script:
    - ./gradlew :Apigateway:build :UserService:build :TicketService:build :DiscoveryService:build -x test
    - export SONAR_TOKEN="$SONAR_TOKEN"
    - ./gradlew sonar "-Dsonar.login=$SONAR_TOKEN"
  variables:
    SONAR_HOST_URL: "https://sonarcloud.io"
    SONAR_LOGIN: "$SONAR_TOKEN"
  needs:
    - e2e-test
  only:
    - main
    - dev
    - master
  allow_failure: true

# Deploy Jobs
deploy-apigateway:
  stage: deploy
  image: docker:20.10
  services:
    - docker:dind
  tags:
    - docker
  before_script:
    - echo "$DOCKER_PASSWORD" | docker login -u "$DOCKER_USER" --password-stdin
  script:
    - docker build --build-arg JAR_FILE=apigateway.jar -t ${DOCKER_IMAGE_PREFIX}/apigateway:${CI_COMMIT_REF_SLUG} ./Apigateway
    - docker push ${DOCKER_IMAGE_PREFIX}/apigateway:${CI_COMMIT_REF_SLUG}
    - docker tag ${DOCKER_IMAGE_PREFIX}/apigateway:${CI_COMMIT_REF_SLUG} ${DOCKER_IMAGE_PREFIX}/apigateway:latest
    - docker push ${DOCKER_IMAGE_PREFIX}/apigateway:latest
  environment: production
  needs:
    - sonarqube-check

deploy-userservice:
  stage: deploy
  image: docker:20.10
  services:
    - docker:dind
  tags:
    - docker
  before_script:
    - echo "$DOCKER_PASSWORD" | docker login -u "$DOCKER_USER" --password-stdin
  script:
    - docker build --build-arg JAR_FILE=userservice.jar -t ${DOCKER_IMAGE_PREFIX}/userservice:${CI_COMMIT_REF_SLUG} ./UserService
    - docker push ${DOCKER_IMAGE_PREFIX}/userservice:${CI_COMMIT_REF_SLUG}
    - docker tag ${DOCKER_IMAGE_PREFIX}/userservice:${CI_COMMIT_REF_SLUG} ${DOCKER_IMAGE_PREFIX}/userservice:latest
    - docker push ${DOCKER_IMAGE_PREFIX}/userservice:latest
  environment: production
  needs:
    - sonarqube-check

deploy-ticketservice:
  stage: deploy
  image: docker:20.10
  services:
    - docker:dind
  tags:
    - docker
  before_script:
    - echo "$DOCKER_PASSWORD" | docker login -u "$DOCKER_USER" --password-stdin
  script:
    - docker build --build-arg JAR_FILE=ticketservice.jar -t ${DOCKER_IMAGE_PREFIX}/ticketservice:${CI_COMMIT_REF_SLUG} ./TicketService
    - docker push ${DOCKER_IMAGE_PREFIX}/ticketservice:${CI_COMMIT_REF_SLUG}
    - docker tag ${DOCKER_IMAGE_PREFIX}/ticketservice:${CI_COMMIT_REF_SLUG} ${DOCKER_IMAGE_PREFIX}/ticketservice:latest
    - docker push ${DOCKER_IMAGE_PREFIX}/ticketservice:latest
  environment: production
  needs:
    - sonarqube-check

deploy-discoveryservice:
  stage: deploy
  image: docker:20.10
  services:
    - docker:dind
  tags:
    - docker
  before_script:
    - echo "$DOCKER_PASSWORD" | docker login -u "$DOCKER_USER" --password-stdin
  script:
    - docker build --build-arg JAR_FILE=discoveryservice.jar -t ${DOCKER_IMAGE_PREFIX}/discoveryservice:${CI_COMMIT_REF_SLUG} ./DiscoveryService
    - docker push ${DOCKER_IMAGE_PREFIX}/discoveryservice:${CI_COMMIT_REF_SLUG}
    - docker tag ${DOCKER_IMAGE_PREFIX}/discoveryservice:${CI_COMMIT_REF_SLUG} ${DOCKER_IMAGE_PREFIX}/discoveryservice:latest
    - docker push ${DOCKER_IMAGE_PREFIX}/discoveryservice:latest
  environment: production
  needs:
    - sonarqube-check