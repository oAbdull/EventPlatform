stages:
  - build
  - e2e_test
  - code_quality
  - deploy

services:
  - name: docker:dind
    alias: docker

cache:
  key: ${CI_COMMIT_REF_SLUG}
  paths:
    - .gradle/

# Build Jobs
build-api-gateway:
  stage: build
  image: gradle:8.4.0-jdk17
  tags:
    - docker
  script:
    - cd api-gateway
    - chmod +x ./gradlew
    - ./gradlew clean build -x test
    - |
      JAR_FILE=$(find build/libs -name "*.jar" -type f | head -n 1)
      if [ -n "$JAR_FILE" ]; then
        cp "$JAR_FILE" ../api-gateway.jar
      else
        echo "No JAR file found"
        exit 1
      fi
  artifacts:
    paths:
      - api-gateway.jar

build-event-service:
  stage: build
  image: gradle:8.4.0-jdk17
  tags:
    - docker
  script:
    - cd event-service
    - chmod +x ./gradlew
    - ./gradlew clean build -x test
    - |
      JAR_FILE=$(find build/libs -name "*.jar" -type f | head -n 1)
      if [ -n "$JAR_FILE" ]; then
        cp "$JAR_FILE" ../event-service.jar
      else
        echo "No JAR file found"
        exit 1
      fi
  artifacts:
    paths:
      - event-service.jar

build-ticket-service:
  stage: build
  image: gradle:8.4.0-jdk17
  tags:
    - docker
  script:
    - cd ticket-service
    - chmod +x ./gradlew
    - ./gradlew clean build -x test
    - |
      JAR_FILE=$(find build/libs -name "*.jar" -type f | head -n 1)
      if [ -n "$JAR_FILE" ]; then
        cp "$JAR_FILE" ../ticket-service.jar
      else
        echo "No JAR file found"
        exit 1
      fi
  artifacts:
    paths:
      - ticket-service.jar

build-discovery-service:
  stage: build
  image: gradle:8.4.0-jdk17
  tags:
    - docker
  script:
    - cd discovery-service
    - chmod +x ./gradlew
    - ./gradlew clean build -x test
    - |
      JAR_FILE=$(find build/libs -name "*.jar" -type f | head -n 1)
      if [ -n "$JAR_FILE" ]; then
        cp "$JAR_FILE" ../discovery-service.jar
      else
        echo "No JAR file found"
        exit 1
      fi
  artifacts:
    paths:
      - discovery-service.jar

# E2E Test Job
e2e-test-api-gateway:
  stage: e2e_test
  image: gradle:8.4.0-jdk17
  tags:
    - docker
  services:
    - docker:dind
  before_script:
    - apt-get update && apt-get install -y docker-compose
    - export DOCKER_HOST=tcp://docker:2375
    - docker-compose -f docker-compose.yml up -d
    - sleep 60
    - docker ps
    - echo "Checking container logs..."
    - docker logs api-gateway || true
    - docker logs event-service || true
    - docker logs ticket-service || true
    - docker logs discovery-server || true
  script:
    - cd api-gateway
    - chmod +x ./gradlew
    - ./gradlew test --tests "com.apigateway.ApigatewayApplicationTests"
  after_script:
    - |
      echo "Stopping Docker Compose services..."
      if [ -f docker-compose.yml ]; then
        docker-compose -f docker-compose.yml down || echo "docker-compose down failed"
      else
        echo "docker-compose.yml not found"
      fi
  needs:
    - build-api-gateway
    - build-event-service
    - build-ticket-service
    - build-discovery-service
  variables:
    SPRING_PROFILES_ACTIVE: test
  artifacts:
    paths:
      - api-gateway/build/test-results/test
    expire_in: 1 week

  # # SonarQube Analysis
  # sonarqube-check:
  #   stage: code_quality
  #   image: gradle:8.4.0-jdk17
  #   tags:
  #     - docker
  #   before_script:
  #     - chmod +x ./gradlew
  #   script:
  #     - ./gradlew :api-gateway:build :event-service:build :ticket-service:build :discovery-service:build -x test
  #     - export SONAR_TOKEN="$SONAR_TOKEN"
  #     - ./gradlew sonar "-Dsonar.login=$SONAR_TOKEN"
  #   variables:
  #     SONAR_HOST_URL: "https://sonarcloud.io"
  #     SONAR_LOGIN: "$SONAR_TOKEN"
  #   needs:
  #     - e2e-test-api-gateway
  #   only:
  #     - main
  #     - dev
  #     - master
  #   allow_failure: true
  # Deploy Jobs

  # deploy-api-gateway:
  #   stage: deploy
  #   image: docker:20.10
  #   services:
  #     - docker:dind
  #   variables:
  #     DOCKER_HOST: tcp://docker:2375
  #     DOCKER_TLS_CERTDIR: ""
  #     SERVICE_NAME: apigateway
  #   tags:
  #     - docker
  #   before_script:
  #     - echo "$DOCKER_PASSWORD" | docker login -u "$DOCKER_USER" --password-stdin
  #   script:
  #     - docker info
  #     - docker build -t "$DOCKER_IMAGE_PREFIX/$SERVICE_NAME:$CI_COMMIT_SHORT_SHA" ./$SERVICE_NAME
  #     - docker push "$DOCKER_IMAGE_PREFIX/$SERVICE_NAME:$CI_COMMIT_SHORT_SHA"
  #     - docker tag "$DOCKER_IMAGE_PREFIX/$SERVICE_NAME:$CI_COMMIT_SHORT_SHA" "$DOCKER_IMAGE_PREFIX/$SERVICE_NAME:latest"
  #     - docker push "$DOCKER_IMAGE_PREFIX/$SERVICE_NAME:latest"
  #   environment: production
  #   needs:
  #     - build-api-gateway
  #   only:
  #     changes:
  #       - api-gateway/**

  # needs:
  #   - sonarqube-check