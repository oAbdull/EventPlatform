stages:
  - build
  - e2e_test
  - code_quality
  - deploy

services:
  - name: docker:dind
    alias: docker

cache:
  key: ${CI_COMMIT_REF_SLUG}
  paths:
    - .gradle/

# Build Jobs
build-api-gateway:
  stage: build
  image: gradle:8.4.0-jdk17
  tags:
    - docker
  script:
    - cd api-gateway
    - chmod +x ./gradlew
    - ./gradlew clean build -x test
    - |
      JAR_FILE=$(find build/libs -name "*.jar" -type f | head -n 1)
      if [ -n "$JAR_FILE" ]; then
        cp "$JAR_FILE" ../api-gateway.jar
      else
        echo "No JAR file found"
        exit 1
      fi
  artifacts:
    paths:
      - api-gateway.jar

build-event-service:
  stage: build
  image: gradle:8.4.0-jdk17
  tags:
    - docker
  script:
    - cd event-service
    - chmod +x ./gradlew
    - ./gradlew clean build -x test
    - |
      JAR_FILE=$(find build/libs -name "*.jar" -type f | head -n 1)
      if [ -n "$JAR_FILE" ]; then
        cp "$JAR_FILE" ../event-service.jar
      else
        echo "No JAR file found"
        exit 1
      fi
  artifacts:
    paths:
      - event-service.jar

build-ticket-service:
  stage: build
  image: gradle:8.4.0-jdk17
  tags:
    - docker
  script:
    - cd ticket-service
    - chmod +x ./gradlew
    - ./gradlew clean build -x test
    - |
      JAR_FILE=$(find build/libs -name "*.jar" -type f | head -n 1)
      if [ -n "$JAR_FILE" ]; then
        cp "$JAR_FILE" ../ticket-service.jar
      else
        echo "No JAR file found"
        exit 1
      fi
  artifacts:
    paths:
      - ticket-service.jar

build-discovery-service:
  stage: build
  image: gradle:8.4.0-jdk17
  tags:
    - docker
  script:
    - cd discovery-service
    - chmod +x ./gradlew
    - ./gradlew clean build -x test
    - |
      JAR_FILE=$(find build/libs -name "*.jar" -type f | head -n 1)
      if [ -n "$JAR_FILE" ]; then
        cp "$JAR_FILE" ../discovery-service.jar
      else
        echo "No JAR file found"
        exit 1
      fi
  artifacts:
    paths:
      - discovery-service.jar

# E2E Test Job
e2e-test-api-gateway:
  stage: e2e_test
  image: gradle:8.4.0-jdk17
  tags:
    - docker
  services:
    - name: docker:dind
      alias: docker
  variables:
    DOCKER_TLS_CERTDIR: ""
    SPRING_PROFILES_ACTIVE: test
  before_script:
    - apt-get update && apt-get install -y docker-compose
    - docker info || echo "Docker info failed"
    - docker-compose -f docker-compose.yml up -d --build
    - sleep 60
    - docker ps
    - echo "Checking container logs..."
    - docker logs api-gateway || true
    - docker logs event-service || true
    - docker logs ticket-service || true
    - docker logs discovery-server || true
  script:
    - cd api-gateway
    - chmod +x ./gradlew
    - ./gradlew test --tests "com.apigateway.ApigatewayApplicationTests"
  after_script:
    - echo "Skipping docker-compose down as frontend service is not needed for e2e tests"
  needs:
    - build-api-gateway
    - build-event-service
    - build-ticket-service
    - build-discovery-service

  artifacts:
    paths:
      - api-gateway/build/test-results/test
    expire_in: 1 week

# SonarQube Analysis
sonarqube-check:
  stage: code_quality
  image: gradle:8.4.0-jdk17
  tags:
    - docker
  before_script:
    - chmod +x ./gradlew
  script:
    - ./gradlew :api-gateway:build :event-service:build :ticket-service:build :discovery-service:build -x test
    - export SONAR_TOKEN="$SONAR_TOKEN"
    - ./gradlew sonar "-Dsonar.login=$SONAR_TOKEN"
  variables:
    SONAR_HOST_URL: "https://sonarcloud.io"
    SONAR_LOGIN: "$SONAR_TOKEN"
  needs:
    - e2e-test-api-gateway
  only:
    - main
    - dev
    - master
  allow_failure: true

# Deploy Jobs
deploy-all:
  stage: deploy
  image: docker:20.10
  services:
    - name: docker:dind
      alias: docker
  variables:
    DOCKER_TLS_CERTDIR: ""
  tags:
    - docker
  before_script:
    - echo "$DOCKER_PASSWORD" | docker login -u "$DOCKER_USER" --password-stdin
  script:
    - docker info
    - docker-compose -f docker-compose.yml build
    - docker tag eventplatform-eureka-server "$DOCKER_USER/eventplatform:eureka-server-$CI_COMMIT_SHORT_SHA"
    - docker tag eventplatform-event-service "$DOCKER_USER/eventplatform:event-service-$CI_COMMIT_SHORT_SHA"
    - docker tag eventplatform-ticket-service "$DOCKER_USER/eventplatform:ticket-service-$CI_COMMIT_SHORT_SHA"
    - docker tag eventplatform-api-gateway "$DOCKER_USER/eventplatform:api-gateway-$CI_COMMIT_SHORT_SHA"
    - docker tag eventplatform-frontend "$DOCKER_USER/eventplatform:frontend-$CI_COMMIT_SHORT_SHA"
    - docker push "$DOCKER_USER/eventplatform:eureka-server-$CI_COMMIT_SHORT_SHA"
    - docker push "$DOCKER_USER/eventplatform:event-service-$CI_COMMIT_SHORT_SHA"
    - docker push "$DOCKER_USER/eventplatform:ticket-service-$CI_COMMIT_SHORT_SHA"
    - docker push "$DOCKER_USER/eventplatform:api-gateway-$CI_COMMIT_SHORT_SHA"
    - docker push "$DOCKER_USER/eventplatform:frontend-$CI_COMMIT_SHORT_SHA"
    - docker tag eventplatform-eureka-server "$DOCKER_USER/eventplatform:eureka-server-latest"
    - docker tag eventplatform-event-service "$DOCKER_USER/eventplatform:event-service-latest"
    - docker tag eventplatform-ticket-service "$DOCKER_USER/eventplatform:ticket-service-latest"
    - docker tag eventplatform-api-gateway "$DOCKER_USER/eventplatform:api-gateway-latest"
    - docker tag eventplatform-frontend "$DOCKER_USER/eventplatform:frontend-latest"
    - docker push "$DOCKER_USER/eventplatform:eureka-server-latest"
    - docker push "$DOCKER_USER/eventplatform:event-service-latest"
    - docker push "$DOCKER_USER/eventplatform:ticket-service-latest"
    - docker push "$DOCKER_USER/eventplatform:api-gateway-latest"
    - docker push "$DOCKER_USER/eventplatform:frontend-latest"
  environment: production
  needs:
    - sonarqube-check
  only:
    - main