stages:
  - build
  - test
  - e2e_test
  - code_quality
  - deploy

# Add a service definition for docker:dind with an alias
services:
  - name: docker:dind
    alias: docker

# Add cache configuration for all jobs
cache:
  key: ${CI_COMMIT_REF_SLUG}
  paths:
    - .gradle/

# Build Jobs (No changes)
build-apigateway:
  stage: build
  image: gradle:jdk17
  tags:
    - docker
  before_script:
    - chmod +x ./gradlew
  script:
    - ./gradlew :Apigateway:clean :Apigateway:build -x test
    - |
      JAR_FILE=$(find Apigateway/build/libs -name "*.jar" -type f | head -n 1)
      if [ -n "$JAR_FILE" ]; then
        cp "$JAR_FILE" apigateway.jar
      else
        echo "No JAR file found in Apigateway/build/libs directory"
        find Apigateway/build -name "*.jar" -type f
        exit 1
      fi
  artifacts:
    paths:
      - apigateway.jar

build-eventservice:
  stage: build
  image: gradle:jdk17
  tags:
    - docker
  before_script:
    - chmod +x ./gradlew
  script:
    - ./gradlew :EventService:clean :EventService:build -x test
    - |
      JAR_FILE=$(find EventService/build/libs -name "*.jar" -type f | head -n 1)
      if [ -n "$JAR_FILE" ]; then
        cp "$JAR_FILE" eventservice.jar
      else
        echo "No JAR file found in EventService/build/libs directory"
        find EventService/build -name "*.jar" -type f
        exit 1
      fi
  artifacts:
    paths:
      - eventservice.jar

build-userservice:
  stage: build
  image: gradle:jdk17
  tags:
    - docker
  before_script:
    - chmod +x ./gradlew
  script:
    - ./gradlew :UserService:clean :UserService:build -x test
    - |
      JAR_FILE=$(find UserService/build/libs -name "*.jar" -type f | head -n 1)
      if [ -n "$JAR_FILE" ]; then
        cp "$JAR_FILE" userservice.jar
      else
        echo "No JAR file found in UserService/build/libs directory"
        find UserService/build -name "*.jar" -type f
        exit 1
      fi
  artifacts:
    paths:
      - userservice.jar

build-ticketservice:
  stage: build
  image: gradle:jdk17
  tags:
    - docker
  before_script:
    - chmod +x ./gradlew
  script:
    - ./gradlew :TicketService:clean :TicketService:build -x test
    - |
      JAR_FILE=$(find TicketService/build/libs -name "*.jar" -type f | head -n 1)
      if [ -n "$JAR_FILE" ]; then
        cp "$JAR_FILE" ticketservice.jar
      else
        echo "No JAR file found in TicketService/build/libs directory"
        find TicketService/build -name "*.jar" -type f
        exit 1
      fi
  artifacts:
    paths:
      - ticketservice.jar

# Test Jobs (Updated with services for database connectivity)


# Deploy Jobs
deploy-apigateway:
  stage: deploy
  image: docker:20.10
  services:
    - docker:dind
  tags:
    - docker
  before_script:
    - echo "$DOCKER_PASSWORD" | docker login -u "$DOCKER_USER" --password-stdin
  script:
    - docker build --build-arg JAR_FILE=apigateway.jar -t ${DOCKER_IMAGE_PREFIX}/apigateway:${CI_COMMIT_REF_SLUG} ./Apigateway
    - docker push ${DOCKER_IMAGE_PREFIX}/apigateway:${CI_COMMIT_REF_SLUG}
    - docker tag ${DOCKER_IMAGE_PREFIX}/apigateway:${CI_COMMIT_REF_SLUG} ${DOCKER_IMAGE_PREFIX}/apigateway:latest
    - docker push ${DOCKER_IMAGE_PREFIX}/apigateway:latest
  environment: production
  needs:
    - sonarqube-check

deploy-userservice:
  stage: deploy
  image: docker:20.10
  services:
    - docker:dind
  tags:
    - docker
  before_script:
    - echo "$DOCKER_PASSWORD" | docker login -u "$DOCKER_USER" --password-stdin
  script:
    - docker build --build-arg JAR_FILE=userservice.jar -t ${DOCKER_IMAGE_PREFIX}/userservice:${CI_COMMIT_REF_SLUG} ./UserService
    - docker push ${DOCKER_IMAGE_PREFIX}/userservice:${CI_COMMIT_REF_SLUG}
    - docker tag ${DOCKER_IMAGE_PREFIX}/userservice:${CI_COMMIT_REF_SLUG} ${DOCKER_IMAGE_PREFIX}/userservice:latest
    - docker push ${DOCKER_IMAGE_PREFIX}/userservice:latest
  environment: production
  needs:
    - sonarqube-check

deploy-ticketservice:
  stage: deploy
  image: docker:20.10
  services:
    - docker:dind
  tags:
    - docker
  before_script:
    - echo "$DOCKER_PASSWORD" | docker login -u "$DOCKER_USER" --password-stdin
  script:
    - docker build --build-arg JAR_FILE=ticketservice.jar -t ${DOCKER_IMAGE_PREFIX}/ticketservice:${CI_COMMIT_REF_SLUG} ./TicketService
    - docker push ${DOCKER_IMAGE_PREFIX}/ticketservice:${CI_COMMIT_REF_SLUG}
    - docker tag ${DOCKER_IMAGE_PREFIX}/ticketservice:${CI_COMMIT_REF_SLUG} ${DOCKER_IMAGE_PREFIX}/ticketservice:latest
    - docker push ${DOCKER_IMAGE_PREFIX}/ticketservice:latest
  environment: production
  needs:
    - sonarqube-check

deploy-discoveryservice:
  stage: deploy
  image: docker:20.10
  services:
    - docker:dind
  tags:
    - docker
  before_script:
    - echo "$DOCKER_PASSWORD" | docker login -u "$DOCKER_USER" --password-stdin
  script:
    - docker build --build-arg JAR_FILE=discoveryservice.jar -t ${DOCKER_IMAGE_PREFIX}/discoveryservice:${CI_COMMIT_REF_SLUG} ./DiscoveryService
    - docker push ${DOCKER_IMAGE_PREFIX}/discoveryservice:${CI_COMMIT_REF_SLUG}
    - docker tag ${DOCKER_IMAGE_PREFIX}/discoveryservice:${CI_COMMIT_REF_SLUG} ${DOCKER_IMAGE_PREFIX}/discoveryservice:latest
    - docker push ${DOCKER_IMAGE_PREFIX}/discoveryservice:latest
  environment: production
  needs:
    - sonarqube-check